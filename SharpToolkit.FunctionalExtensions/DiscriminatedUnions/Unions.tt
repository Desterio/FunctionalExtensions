<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using SharpToolkit.FunctionalExtensions.DiscriminatedUnions;

namespace SharpToolkit.FunctionalExtensions
{

<#

for (int argumentCount = 1; argumentCount <= 7; argumentCount += 1)
{
    var argNames = 
        Enumerable
        .Range(1, argumentCount)
        .Select(x => GetTypeArgumentName(x))
        .ToArray();

    var className =
        "Union<" + 
        argNames
        .Aggregate((aggr, cur) => aggr + ", " + cur) + ">";
    
    // Class declaration
#>  
    public abstract class <#= className #> : IEquatable<<#= className #>>
<# 
    // Generic contraints
    foreach (var n in argNames)
    {
#>
        where <#= n #> : Case
<#  } #>
    {
    
<#
    // Class fileds
    for (var i = 1; i <= argNames.Length; i += 1)
    {
#>
        CaseSelection<#= "<" + argNames[i - 1] + ">" #> case<#= i #>;
<#
    }
#>
        
<#
    // Constructors
    foreach (var n in argNames)
    {
#>
        public Union(<#= n #> @case)
        {
            set(@case);
        }
<#
    }
#>
        
<#
    // Equals method

    #>
        public bool Equals(<#= className #> other)
        {
            return 
<# 
    for (var i = 1; i <= argNames.Length; i += 1)
    {
        #>
                this.case<#= i #>.Equals(other.case<#= i #>)<#
        if (i != argNames.Length)
        {
            #> && 
<#
        }
    }
#>;
        }

<#
    // object.Equals override
    #>
        public override bool Equals(object other)
        {
            if (other is <#= className #> o)
                return this.Equals(o);

            return false;
        }
    <#
    // Operators
    #>
        public static bool operator == (<#= className #> left, <#= className #> right)
        {
            return left.Equals(right);
        }

        public static bool operator != (<#= className #> left, <#= className #> right)
        {
            return !left.Equals(right);
        }
    <#
    // Set methods
    for (var i = 1; i <= argNames.Length; i += 1)
    {
#>
        private void set(<#= argNames[i - 1] #> @case)
        {
        <#
            for (var j = 1; j <= argNames.Length; j += 1)
            {
        #>    this.case<#= j #> = <#= 
                i == j ?
                "new SelectedCase<" + argNames[j - 1] + ">(@case);" :
                "new UnselectedCase<" + argNames[j - 1] + ">();"
            #>
        <#
            }
        #>
            
        }
<#
    }
#>

<#
    // When methods
    for (var i = 1; i <= argNames.Length; i += 1)
    {
#>
        public void When(Action<#= "<" + argNames[i - 1] + ">" #> action)
        {
            this.case<#= i #>.Do(action.AsFunc(), out var r);
        }

        public TResult When<TResult>(Func<#= "<" + argNames[i - 1] + ", TResult>" #> fn)
        {
            this.case<#= i #>.Do(fn, out var r);

            return r;
        }
<#
    }
#>

<#
    // Switch methods
    var permutatedSwtichLimit = 0;
    
	// When the number of type arguments is less then the limit, create all switch permutations
    if (argumentCount <= permutatedSwtichLimit)
    {
        var argNamesSlice = argNames.Take(permutatedSwtichLimit).Select((x, i) => new { str = x, i = i + 1 });
        var argNamesPermutations = GetPermutations(argNamesSlice, argNamesSlice.Count());

    
        foreach (var p in argNamesPermutations)
        {
#>
        public TResult Match<TResult>(<#= 
            p
            .Select(x => "Func<" + x.str + ", TResult> fn" + x.i)
            .Aggregate((aggr, cur) => aggr + ", " + cur)
        #>)
        {
            TResult r = default;  
        <# for (var i = 1; i <= argNames.Length; i += 1)
           {
        #>              
            if (this.case<#= i #>.Do(fn<#= i #>, out r)) return r;            
        <#
           }
        #> 
            throw new InvalidOperationException("The union is empty. This is a bug, please report an issue to https://github.com/SharpToolkit/FunctionalExtensions.");
        }
        
        public void Match(<#= 
            p
            .Select(x => "Action<" + x.str + "> action" + x.i)
            .Aggregate((aggr, cur) => aggr + ", " + cur)
        #>)
        {
            int r = default;
        <# for (var i = 1; i <= argNames.Length; i += 1)
           {
        #>    this.case<#= i #>.Do(action<#= i #>.AsFunc(), out r);
        <#
           }
        #>}

        
<#
        }
    } // if (argumentCount <= permutatedSwtichLimit)

	// When the number of type arguments is more then the limit, create only one overload
    else
    {
        #>
        public void Match(<#= 
            argNames
            .Select((x, i) => new { str = x, i = i + 1 })
            .Select(x => "Action<" + x.str + "> action" + x.i)
            .Aggregate((aggr, cur) => aggr + ", " + cur)
        #>)
        { 
            int r = default;
		<#
        for (var i = 1; i <= argNames.Length; i += 1)
        {
        #>    this.case<#= i #>.Do(action<#= i #>.AsFunc(), out r);
        <#
        }
        #>}

        public TResult Match<TResult>(<#= 
            argNames
            .Select((x, i) => new { str = x, i = i + 1 })
            .Select(x => "Func<" + x.str + ", TResult> fn" + x.i)
            .Aggregate((aggr, cur) => aggr + ", " + cur)
        #>)
        {  
            TResult r = default;
		<#
        for (var i = 1; i <= argNames.Length; i += 1)
        {
        #>    if (this.case<#= i #>.Do(fn<#= i #>, out r)) return r;
        <#
        }
        #> 
              throw new InvalidOperationException("The union is empty. This is a bug, please report an issue to https://github.com/SharpToolkit/FunctionalExtensions.");
        }
<#
    } // else


#>    }
<#
}
#>


}

<#+

private string GetTypeArgumentName(int i)
{
    return "T" + i.ToString();
}

private string GetTypeArgumentName(string i)
{
    return "T" + i;
}

static IEnumerable<IEnumerable<T>>
            GetPermutations<T>(IEnumerable<T> list, int length)
{
    if (length == 1) return list.Select(t => new T[] { t });

    return GetPermutations(list, length - 1)
        .SelectMany(t => list.Where(e => !t.Contains(e)),
            (t1, t2) => t1.Concat(new T[] { t2 }));
}

#>

